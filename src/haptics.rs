use serde::{Deserialize, Serialize};
use wasm_bindgen::{prelude::wasm_bindgen, JsValue};

#[wasm_bindgen()]
extern "C" {

    /// Vibrate the device
    #[wasm_bindgen(js_namespace = ["Capacitor", "Plugins", "Haptics"])]
    async fn vibrate(options: JsValue);

    #[wasm_bindgen(js_namespace = ["Capacitor", "Plugins", "Haptics"])]
    async fn impact(options: JsValue);

    /// Trigger a haptics "notification" feedback
    #[wasm_bindgen(js_namespace = ["Capacitor", "Plugins", "Haptics"])]
    async fn notification(options: JsValue);

    /// Trigger a selection started haptic hint
    #[wasm_bindgen(js_namespace = ["Capacitor", "Plugins", "Haptics"])]
    async fn selectionStart();

    /// Trigger a selection changed haptic hint. If a selection was started already, this will cause the device to provide haptic feedback
    #[wasm_bindgen(js_namespace = ["Capacitor", "Plugins", "Haptics"])]
    async fn selectionChanged();

    /// If selectionStart() was called, selectionEnd() ends the selection. For example, call this when a user has lifted their finger from a control
    #[wasm_bindgen(js_namespace = ["Capacitor", "Plugins", "Haptics"])]
    async fn selectionEnd();
}

pub struct Haptics;

impl Haptics {
    /// Trigger a haptics "impact" feedback
    pub async fn impact(options: impl Into<ImpactOptions>) {
        let options = options.into();
        let js_val = serde_wasm_bindgen::to_value(&options).unwrap();
        impact(js_val).await
    }

    /// Vibrate the device
    pub async fn vibrate(options: impl Into<VibrateOptions>) {
        let options = options.into();
        let js_val = serde_wasm_bindgen::to_value(&options).unwrap();
        wasm_bindgen_futures::spawn_local(vibrate(js_val));
    }

    /// Trigger a haptics "notification" feedback
    pub async fn notification(options: impl Into<NotificationOptions>) {
        let options = options.into();
        let js_val = serde_wasm_bindgen::to_value(&options).unwrap();
        notification(js_val).await
    }

    pub async fn selection_start() {
        selectionStart().await
    }

    pub async fn selection_changed() {
        selectionChanged().await
    }

    pub async fn selection_end() {
        selectionEnd().await
    }
}

#[derive(Debug, Serialize, Deserialize)]
pub struct VibrateOptions {
    /// Duration of the vibration in milliseconds.
    pub duration: f64,
}

impl From<f64> for VibrateOptions {
    fn from(duration: f64) -> Self {
        Self { duration }
    }
}

impl Default for VibrateOptions {
    fn default() -> Self {
        Self { duration: 300.0 }
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Deserialize, Serialize)]
pub struct NotificationOptions {
    /// Notification Feedback Type The type of notification feedback generated by a UINotificationFeedbackGenerator object.
    #[serde(rename = "type")]
    pub notification_type: NotificationType,
}

impl From<NotificationType> for NotificationOptions {
    fn from(notification_type: NotificationType) -> Self {
        Self { notification_type }
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Deserialize, Serialize)]
#[serde(rename_all = "UPPERCASE")]
pub enum NotificationType {
    /// A notification feedback type indicating that a task has completed successfully
    Success,
    /// A notification feedback type indicating that a task has produced a warning
    Warning,
    /// A notification feedback type indicating that a task has failed
    Error,
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Deserialize, Serialize)]
pub struct ImpactOptions {
    /// Impact Feedback Style The mass of the objects in the collision simulated by a UIImpactFeedbackGenerator object.
    pub style: ImpactStyle,
}

impl From<ImpactStyle> for ImpactOptions {
    fn from(style: ImpactStyle) -> Self {
        Self { style }
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Deserialize, Serialize)]
#[serde(rename_all = "UPPERCASE")]
pub enum ImpactStyle {
    /// A collision between large, heavy user interface elements
    Heavy,
    /// A collision between moderately sized user interface elements
    Medium,
    /// A collision between small, light user interface elements
    Light,
}
